<?php

namespace Tests\Feature;

use App\Models\ActiveDeposit;
use App\Models\Card;
use App\Models\User;
use App\Models\UserCard;
use App\Repository\Eloquent\CardRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class DepositControllerTest extends TestCase
{
    use RefreshDatabase;

    private $user, $card, $userCard, $deposit;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'name' => 'Igor',
            'email' => 'igor@g.c',
            'password' => '1111Ij!'
        ]);
        $this->card = Card::factory()->create([
            'type' => 'checking',
            'number' => '10101010101010',
            'cvv' => '657',
            'expires_end' => date('y-m-d'),
            'sum' => 1000,
            'currency' => 'EUR'
        ]);
        $this->userCard = UserCard::factory()->create([
            'user_id' => $this->user['id'],
            'card_id' => $this->card['id']
        ]);
        $this->deposit = ActiveDeposit::factory()->create();
    }

    public function test_all()
    {
        $this->json('GET', 'api/en/allDeposits')
            ->assertStatus(401)
            ->assertJson([
                'error' => "Unauthorized"
            ]);

        $this->actingAs($this->user)->json('GET', 'api/en/allDeposits')
            ->assertStatus(200)
            ->assertJsonFragment([
                'status' => 'success'
            ]);
    }

    public function test_accept()
    {
        $data = [
            'currency' => 'EUR',
            'sum' => 100,
            'percent' => 5,
            'duration' => 6,
            'numberFrom' => Arr::get($this->card, 'number', null)
        ];
        $this->json('POST', 'api/en/acceptDeposit/1', $data)
            ->assertStatus(200)
            ->assertJson([
                'error' => "Unauthorized"
            ]);
        $this->actingAs($this->user)->json('POST', 'api/en/acceptDeposit/1', $data)
            ->assertStatus(200)
            ->assertJson([
                'response' => "Done!"
            ]);
        $data['numberFrom'] = '00898299729';
        $this->actingAs($this->user)->json('POST', 'api/en/acceptDeposit/1', $data)
            ->assertStatus(200)
            ->assertJson([
                'error' => 'No such cards'
            ]);
    }

    public function test_close()
    {
        $id = Arr::get($this->deposit, 'id', null);
        $this->json('POST', 'api/en/closeDeposit/'.$id)
            ->assertStatus(200)
            ->assertJson([
                'error' => "Unauthorized"
            ]);
        $this->actingAs($this->user)->json('POST', 'api/en/closeDeposit/'.$id)
            ->assertStatus(200)
            ->assertJson([
                'error' => 'No such deposit'
            ]);
    }
}
