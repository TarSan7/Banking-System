<?php

namespace Tests\Feature;

use App\Models\Card;
use App\Models\User;
use App\Models\UserCard;
use App\Repository\Eloquent\CardRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Tests\TestCase;

class OtherTransferControllerTest extends TestCase
{
    use RefreshDatabase;

    private $userCard, $card;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'name' => 'Igor',
            'email' => 'igor@g.c',
            'password' => '1111Ij!'
        ]);
        $this->card = Card::factory()->create([
            'type' => 'checking',
            'number' => '10101010101010',
            'cvv' => '657',
            'expires_end' => date('y-m-d'),
            'sum' => 100,
            'currency' => 'EUR'
        ]);
        $this->userCard = UserCard::factory()->create([
            'user_id' => $this->user['id'],
            'card_id' => $this->card['id']
        ]);
    }

    public function test_make()
    {
        $data = [
            'numberFrom' => 0,
            'numberTo' => '+000o0iikj0',
            'sum' => 100,
            'comment' => 'Transfer to phone'
        ];
        $this->json('POST', 'api/en/addCard', $data)
        ->assertStatus(401)
        ->assertJson([
            'error' => "Unauthorized"
        ]);
        $this->actingAs($this->user)->json('POST', 'api/en/otherTransfer/phone', $data)
            ->assertStatus(200)
            ->assertJson([
                "error" => "No such cards"
            ]);
        $transfer = [
            'numberFrom' => Arr::get($this->card, 'id', null),
            'numberTo' => '+380992944788',
            'sum' => 100,
            'comment' => 'Transfer to phone'
        ];
        $this->actingAs($this->user)->json('POST', 'api/en/otherTransfer/phone', $transfer)
            ->assertStatus(200)
            ->assertJson([
                'response' => 'success',
                'message' => 'Done!'
            ]);
        $transfer['numberTo'] = 'Lanet';
        $transfer['comment'] = 'Internet payment';
        $this->actingAs($this->user)->json('POST', 'api/en/otherTransfer/internet', $transfer)
            ->assertStatus(200)
            ->assertJson([
                'response' => 'success',
                'message' => 'Done!'
            ]);
    }
}
