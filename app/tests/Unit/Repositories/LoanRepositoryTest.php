<?php

namespace Tests\Unit\Repositories;

use App\Models\ActiveLoan;
use App\Models\Card;
use App\Models\CardTransfer;
use App\Models\Loan;
use App\Repository\Eloquent\ActiveLoanRepository;
use App\Repository\Eloquent\CardRepository;
use App\Repository\Eloquent\LoanRepository;
use App\Repository\Eloquent\TransferRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Tests\TestCase;

class LoanRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var LoanRepository
     */
    private $loanRepository, $activeLoanRepository;

    /**
     * Set up the test environment.
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->loanRepository = new LoanRepository(
            new Loan(),
            new ActiveLoan()
        );
        $this->activeLoanRepository = new ActiveLoanRepository(
            new ActiveLoan()
        );
    }

    /**
     * Getting all fields of Loan
     */
    public function testAll(): void
    {
        $this->assertCount(5, $this->loanRepository->all());
    }

    /**
     * Get existing loan by id
     */
    public function testGetLoan(): void
    {
        $model = $this->loanRepository->getLoan(1);
        $this->assertEquals('Best', Arr::get($model, 'title', null));
    }

    /**
     * Getting currency by loans id
     */
    public function testGetCurrency(): void
    {
        $this->assertEquals('EUR', $this->loanRepository->getCurrency(1));
    }

    /**
     * Creating new loan
     */
    public function testNewLoan(): void
    {
        if ($this->loanRepository->newLoan(1, 250, 2, 2)) {
            $this->assertDatabaseHas('active_loans', [
                'user_id' => 2
            ]);
        } else {
            $this->assertDatabaseMissing('active_loans', [
                'user_id' => 2
            ]);
        }
    }
}
