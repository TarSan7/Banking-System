<?php

namespace Tests\Unit\Repositories;

use App\Models\ActiveLoan;
use App\Models\Card;
use App\Models\Loan;
use App\Repository\Eloquent\ActiveLoanRepository;
use App\Repository\Eloquent\CardRepository;
use App\Repository\Eloquent\LoanRepository;
use Tests\TestCase;

class ActiveLoanRepositoryTest extends TestCase
{
    /**
     * @var ActiveLoanRepository
     */
    private $activeLoanRepository, $loanRepository;

    /**
     * Set up the test environment.
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->activeLoanRepository = new ActiveLoanRepository(new ActiveLoan(), new CardRepository(new Card()));
        $this->loanRepository = new LoanRepository(new Loan());
    }

    /**
     * Getting all fields of ActiveLoan
     */
    public function testAll(): void
    {
        $this->assertEquals(ActiveLoan::all(), $this->activeLoanRepository->all());
    }

    /**
     * Getting cardsId from all active loans
     */
    public function testGetCardsId(): void
    {
        $cards = $this->activeLoanRepository->getCardsId();
        $this->assertCount(count(ActiveLoan::all()), $cards);
    }

    /**
     * Decrease loan sum
     */
    public function testDecrease(): void
    {
        $this->loanRepository->newLoan(1, 250, 2, 2);
        $loan = ActiveLoan::where('loan_id', 1)->where('sum', 250)->where('card_id', 2)->get()[0];
        $this->assertTrue($this->activeLoanRepository->decrease([$loan]));
        $this->activeLoanRepository->delete($loan['id']);

        $this->loanRepository->newLoan(4, 250, 3, 2);
        ActiveLoan::where('loan_id', 4)->where('sum', 250)->where('card_id', 3)->update(['month_left' => 0]);
        $loan = ActiveLoan::where('loan_id', 4)->where('sum', 250)->where('card_id', 3)->get()[0];
        $this->assertTrue($this->activeLoanRepository->decrease([$loan]));
    }

    /**
     * Deleting active loan
     */
    public function testDelete(): void
    {
        $this->loanRepository->newLoan(2, 300, 3, 2);
        $loan = ActiveLoan::where('loan_id', 2)->where('sum', 300)->where('card_id', 3)->get('id')[0];
        $this->assertTrue($this->activeLoanRepository->delete($loan['id']));
    }

    /**
     * Checking user loans
     */
    public function testUserLoans(): void
    {
        $this->assertIsObject($this->activeLoanRepository->userLoans(1));
    }

}
