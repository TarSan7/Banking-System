<?php

namespace Tests\Unit\Services;

use App\Models\ActiveLoan;
use App\Models\Card;
use App\Models\CardTransfer;
use App\Models\Loan;
use App\Models\User;
use App\Models\UserCard;
use App\Repository\Eloquent\ActiveLoanRepository;
use App\Repository\Eloquent\CardRepository;
use App\Repository\Eloquent\LoanRepository;
use App\Repository\Eloquent\TransferRepository;
use App\Repository\Eloquent\UserCardRepository;
use App\Repository\Eloquent\UserRepository;
use App\Services\CardService;
use App\Services\LoanService;
use Database\Factories\CardFactory;
use Illuminate\Support\Arr;
use Tests\TestCase;

class LoanServiceTest extends TestCase
{

    /**
     * @var LoanService
     */
    private $loanService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->loanService = new LoanService(
            new LoanRepository(new Loan(), new CardRepository(new Card()), new ActiveLoan()),
            new CardService(
                new CardRepository(new Card()),
                new UserCardRepository(new UserCard()),
                new UserRepository(new User()),
                new CardFactory(),
                new TransferRepository(new CardTransfer()),
                new LoanRepository(new Loan(), new CardRepository(new Card()), new ActiveLoan())
            ),

            new ActiveLoanRepository(
                new ActiveLoan(),
                new CardRepository(new Card()),
                new TransferRepository(new CardTransfer())
            ),
            new CardRepository(new Card()),
        );
    }

    /**
     * Getting base loans
     */
    public function testGetBaseLoans(): void
    {
        $this->assertCount(Loan::all()->count(), $this->loanService->getBaseLoans());
    }

    /**
     * Finding one loan
     */
    public function testOneLoan(): void
    {
        $this->assertEquals(Loan::find(1), $this->loanService->oneLoan(1));
    }

    public function testAccept(): void
    {
        $arr = $this->loanService->accept(198, 1);
        $this->assertEquals('success', Arr::get($arr, 0, null));

        $arrSecError = $this->loanService->accept(1000000000,1);
        $this->assertEquals('error', Arr::get($arrSecError, 0, null));

        $arrFormErrorFirst = $this->loanService->accept(100, 1);

        $arrFormErrorSec= $this->loanService->accept(100, 1);
        $arrFormErrorThird= $this->loanService->accept(100, 1);
        $this->assertEquals('error', Arr::get($arrFormErrorThird, 0, null));

    }
}
