<?php

namespace Tests\Unit\Services;

use App\Models\ActiveLoan;
use App\Models\Card;
use App\Models\CardTransfer;
use App\Models\Loan;
use App\Models\User;
use App\Models\UserCard;
use App\Repository\Eloquent\ActiveLoanRepository;
use App\Repository\Eloquent\CardRepository;
use App\Repository\Eloquent\LoanRepository;
use App\Repository\Eloquent\TransferRepository;
use App\Repository\Eloquent\UserCardRepository;
use App\Repository\Eloquent\UserRepository;
use App\Services\AllTransactionsService;
use App\Services\CardService;
use App\Services\LoanService;
use Database\Factories\CardFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Tests\TestCase;

class LoanServiceTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var LoanService
     */
    private $loanService;
    private $mockLoanRepository;
    private $mockCardService;
    private $mockActiveLoanRepository;
    private $mockCardRepository;
    private $mockAllTransactionsService;

    public function setUp(): void
    {
        $this->mockLoanRepository = $this->createMock(LoanRepository::class);
        $this->mockCardRepository = $this->createMock(CardRepository::class);
        $this->mockActiveLoanRepository = $this->createMock(ActiveLoanRepository::class);
        $this->mockCardService = $this->createMock(CardService::class);
        $this->mockAllTransactionsService = $this->createMock(AllTransactionsService::class);

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->loanService = new LoanService(
            $this->mockLoanRepository,
            $this->mockCardService,
            $this->mockActiveLoanRepository,
            $this->mockCardRepository,
            $this->mockAllTransactionsService
        );
    }

    /**
     * Getting base loans
     */
    public function testGetBaseLoans(): void
    {
        $this->mockLoanRepository->method('all')->willReturn(collect(Loan::all()));

        $this->assertCount(5, $this->loanService->getBaseLoans());
    }

    /**
     * Finding one loan
     */
    public function testOneLoan(): void
    {
        $this->mockLoanRepository->method('find')->willReturn(new Loan([
            'id' => 1,
            'title' => 'Best',
            'percent' => 6,
            'duration' => 6,
            'max_sum' => 500000,
            'currency' => 'EUR'
        ]));
        $this->assertEquals('Best', Arr::get($this->loanService->oneLoan(1), 'title', null));
    }

    /**
     * Test if the loan had been accepted
     */
    public function testAccept(): void
    {
        $this->mockLoanRepository->method('getCurrency')->willReturn('EUR');
        $this->mockActiveLoanRepository->method('userLoans')
            ->willReturn(new Collection(), new Collection());
        $this->mockCardService->method('newCreditCard');
        $this->mockCardRepository->method('checkGeneralSum')->willReturn(false, true);
        $this->mockLoanRepository->method('newLoan')->willReturn(true, false);

        $result = $this->loanService->accept(198, 1);
        $this->assertEquals('Bank doesn`t have so much money', Arr::get($result, 1, null));

        $result = $this->loanService->accept(198, 1);
        $this->assertEquals('success', Arr::get($result, 0, null));

    }

    /**
     * Counting user loans
     */
    public function testCountUserLoans(): void
    {
        $this->mockActiveLoanRepository->method('userLoans')->willReturn(new Collection());
        $this->assertCount(0, $this->loanService->getUserLoans());
    }

    /**
     * Getting all user loans
     */
    public function testGetUserLoans(): void
    {
        $this->mockActiveLoanRepository->method('userLoans')->willReturn(new Collection);

        $userLoans = $this->loanService->getUserLoans();
        $this->assertCount(0, $userLoans);
    }
}
