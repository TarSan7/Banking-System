<?php

namespace Tests\Unit\Repositories;

use App\Models\ActiveLoan;
use App\Models\Card;
use App\Models\CardTransfer;
use App\Models\Loan;
use App\Models\User;
use App\Models\UserCard;
use App\Repository\Eloquent\ActiveLoanRepository;
use App\Repository\Eloquent\CardRepository;
use App\Repository\Eloquent\LoanRepository;
use App\Repository\Eloquent\TransferRepository;
use App\Repository\Eloquent\UserCardRepository;
use App\Repository\Eloquent\UserRepository;
use App\Services\CardService;
use Database\Factories\CardFactory;
use Tests\TestCase;

class CardServiceTest extends TestCase
{
    /**
     * @var CardService
     */
    private $cardService;

    /**
     * Set up the test environment.
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cardService = new CardService(
            new CardRepository(new Card()),
            new UserCardRepository(new UserCard()),
            new UserRepository(new User()),
            new CardFactory(),
            new TransferRepository(new CardTransfer()),
            new LoanRepository(new Loan())
        );
    }

    /**
     * Getting card bi id
     */
    public function testGetCardById(): void
    {
        $this->assertIsObject($this->cardService->getCardById(1));
    }

    /**
     * Card existing
     */
    public function testCardExists(): void
    {
        $this->cardService->setCard(Card::find(1));

        $this->assertTrue($this->cardService->cardExist());
    }

    /**
     * Getting card by number
     */
    public function testGetCardByNum(): void
    {
        $this->assertIsObject($this->cardService->getCardByNum('0000000000000000'));
    }

    /**
     * Card added to user
     */
    public function testCardAdded(): void
    {
        $this->cardService->setCard(Card::find(1));

        $this->assertTrue($this->cardService->cardAdded());
    }

    /**
     * Adding card to user
     */
    public function testCreateCard(): void
    {
        $this->assertTrue($this->cardService->createCard());
        UserCard::where('user_id', 0)->delete();
    }

    /**
     * Getting user cards
     */
    public function testGetUserCards(): void
    {
        $this->assertCount(count(UserCard::where('user_id', 1)->get()),$this->cardService->getUserCards());
    }

}
